name: Build and Push Multi-Arch OCI Image

on:
  # Triggers the workflow when code is pushed to the 'master' branch
  push:
    branches:
      - master
  # Allows manual execution from the GitHub Actions tab
  workflow_dispatch:

env:
  # The Artifactory URL is pulled from the GitHub Secret
  ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }} 
  # YOUR OCI repository key
  OCI_REPO: pratham-oci-oc-local 
  # The name you want for your OCI image
  IMAGE_NAME: my-multiarch-app
  IMAGE_TAG: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: üèóÔ∏è Set up QEMU for cross-platform builds
        uses: docker/setup-qemu-action@v3

      - name: üõ†Ô∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîë Log in to Artifactory using Secrets
        # Uses your ARTIFACTORY_URL, ARTIFACTORY_USER, and ARTIFACTORY_TOKEN secrets
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ARTIFACTORY_URL }}
          username: ${{ secrets.ARTIFACTORY_USER }}
          password: ${{ secrets.ARTIFACTORY_TOKEN }}

      - name: ‚öôÔ∏è Build and Push Multi-Architecture Image (Initial Push)
        # Builds for linux/amd64 and linux/arm64 and pushes both plus the manifest list
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          # Target path: 172.16.12.242:8082/pratham-oci-oc-local/my-multiarch-app:latest
          tags: ${{ env.ARTIFACTORY_URL }}/${{ env.OCI_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          push: true

      - name: üè∑Ô∏è Re-Push the same image with a new tag (Replication Test)
        # Tests Artifactory's layer deduplication capability
        run: |
          FULL_IMAGE_PATH="${{ env.ARTIFACTORY_URL }}/${{ env.OCI_REPO }}/${{ env.IMAGE_NAME }}"
          NEW_TAG="retest-tag"
          
          echo "--- Starting Replication Check ---"
          
          # 1. Pull the existing image manifest to get a local reference
          echo "Pulling manifest for original tag (${{ env.IMAGE_TAG }})..."
          docker pull $FULL_IMAGE_PATH:${{ env.IMAGE_TAG }}
          
          # 2. Tag the local image with a new tag
          echo "Tagging image with new tag: ${NEW_TAG}"
          docker tag $FULL_IMAGE_PATH:${{ env.IMAGE_TAG }} $FULL_IMAGE_PATH:${NEW_TAG}
          
          # 3. Push the new tag and OBSERVE THE LOGS HERE
          echo "Pushing new tag (${NEW_TAG})..."
          echo "Expected Result: Layers should be skipped (deduplicated) by Artifactory."
          docker push $FULL_IMAGE_PATH:${NEW_TAG}
          
          echo "--- REPLICATION CHECK COMPLETE ---"
          echo "Review the output above. If the layer uploads were skipped, Artifactory is deduplicating correctly."
