name: Build and Push Multi-Arch OCI Image (JFrog CLI)

on:
  push:
    branches:
      - master
  workflow_dispatch:

env:
  # This uses the Public IP from your GitHub Secret (e.g., 104.x.x.x:8082)
  ARTIFACTORY_ADDRESS: ${{ secrets.ARTIFACTORY_URL }} 
  
  # YOUR OCI repository key
  OCI_REPO: pratham-oci-oc-local 
  IMAGE_NAME: my-multiarch-app
  IMAGE_TAG: latest

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: üèóÔ∏è Set up QEMU for cross-platform builds
        uses: docker/setup-qemu-action@v3

      - name: üõ†Ô∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: ‚öôÔ∏è Setup JFrog CLI and Configuration
        # This loads the JF_ARTIFACTORY_CONFIG secret to authenticate.
        uses: jfrog/setup-jfrog-cli@v3
        env:
          JF_ARTIFACTORY: ${{ secrets.JF_ARTIFACTORY_CONFIG }}
          # This enables insecure HTTP access for your IP:port (required for non-HTTPS registries)
          JFROG_CLI_INSECURE: "true"

      - name: üöÄ Build and Push Multi-Architecture Image (Initial Push)
        run: |
          FULL_IMAGE_TAG="${{ env.ARTIFACTORY_ADDRESS }}/${{ env.OCI_REPO }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          
          echo "Building and pushing multi-arch image directly to Artifactory..."
          
          # This uses the corrected direct-push method for multi-arch images:
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag $FULL_IMAGE_TAG \
            --push .
          echo "Initial push complete. Layers are now in Artifactory."

      - name: üè∑Ô∏è Re-Push the same image with a new tag (Replication Test)
        run: |
          FULL_IMAGE_PATH="${{ env.ARTIFACTORY_ADDRESS }}/${{ env.OCI_REPO }}/${{ env.IMAGE_NAME }}"
          NEW_TAG="retest-tag"
          
          echo "--- Starting Replication Check ---"
          
          # 1. Tag the existing multi-arch image with a new tag
          echo "Tagging image with new tag: ${NEW_TAG}"
          jf rt docker-tag $FULL_IMAGE_PATH:${{ env.IMAGE_TAG }} $FULL_IMAGE_PATH:${NEW_TAG}
          
          # 2. Push the new tag and OBSERVE THE LOGS HERE
          # This push should only upload the new manifest, not the layers.
          echo "Pushing new tag (${NEW_TAG}) with JFrog CLI..."
          jf rt docker-push $FULL_IMAGE_PATH:${NEW_TAG} ${{ env.OCI_REPO }}
          
          echo "--- REPLICATION CHECK COMPLETE ---"
          echo "Review the output above. The second push should be extremely fast, confirming layer deduplication."
